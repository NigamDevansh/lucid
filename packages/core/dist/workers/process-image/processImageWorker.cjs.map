{"version":3,"sources":["../../../src/workers/process-image/processImageWorker.ts"],"sourcesContent":["import z from \"zod\";\r\nimport sharp from \"sharp\";\r\nimport { parentPort } from \"worker_threads\";\r\nimport mime from \"mime-types\";\r\n// Schema\r\nimport mediaSchema from \"@schemas/media.js\";\r\n\r\nexport interface WorkerData {\r\n  buffer: Buffer;\r\n  options: z.infer<typeof mediaSchema.streamSingle.query>;\r\n}\r\n\r\nexport interface ProcessImageSuccessRes {\r\n  success: true;\r\n  data: {\r\n    buffer: Buffer;\r\n    mimeType: string;\r\n    size: number;\r\n    width: number | null;\r\n    height: number | null;\r\n    extension: string;\r\n  };\r\n}\r\n\r\nexport interface ProcessImageErrorRes {\r\n  success: false;\r\n  error: string;\r\n}\r\n\r\nparentPort?.on(\"message\", async (data: WorkerData) => {\r\n  try {\r\n    const transform = sharp(data.buffer);\r\n\r\n    if (data.options.format) {\r\n      transform.toFormat(data.options.format, {\r\n        quality: data.options.quality ? parseInt(data.options.quality) : 80,\r\n      });\r\n    }\r\n\r\n    if (data.options.width || data.options.height) {\r\n      transform.resize({\r\n        width: data.options.width ? parseInt(data.options.width) : undefined,\r\n        height: data.options.height ? parseInt(data.options.height) : undefined,\r\n      });\r\n    }\r\n\r\n    const outputBuffer = await transform.toBuffer();\r\n    const meta = await sharp(outputBuffer).metadata();\r\n\r\n    const mimeType = mime.lookup(data.options.format || \"jpg\") || \"image/jpeg\";\r\n\r\n    const response: ProcessImageSuccessRes = {\r\n      success: true,\r\n      data: {\r\n        buffer: outputBuffer,\r\n        mimeType: mimeType,\r\n        size: outputBuffer.length,\r\n        width: meta.width || null,\r\n        height: meta.height || null,\r\n        extension: mime.extension(mimeType) || \"\",\r\n      },\r\n    };\r\n    parentPort?.postMessage(response);\r\n  } catch (error) {\r\n    const response: ProcessImageErrorRes = {\r\n      success: false,\r\n      error: (error as Error).message,\r\n    };\r\n    parentPort?.postMessage(response);\r\n  }\r\n});\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA,mBAAkB;AAClB,4BAA2B;AAC3B,wBAAiB;AA0BjB,kCAAY,GAAG,WAAW,OAAO,SAAqB;AACpD,MAAI;AACF,UAAM,gBAAY,aAAAA,SAAM,KAAK,MAAM;AAEnC,QAAI,KAAK,QAAQ,QAAQ;AACvB,gBAAU,SAAS,KAAK,QAAQ,QAAQ;AAAA,QACtC,SAAS,KAAK,QAAQ,UAAU,SAAS,KAAK,QAAQ,OAAO,IAAI;AAAA,MACnE,CAAC;AAAA,IACH;AAEA,QAAI,KAAK,QAAQ,SAAS,KAAK,QAAQ,QAAQ;AAC7C,gBAAU,OAAO;AAAA,QACf,OAAO,KAAK,QAAQ,QAAQ,SAAS,KAAK,QAAQ,KAAK,IAAI;AAAA,QAC3D,QAAQ,KAAK,QAAQ,SAAS,SAAS,KAAK,QAAQ,MAAM,IAAI;AAAA,MAChE,CAAC;AAAA,IACH;AAEA,UAAM,eAAe,MAAM,UAAU,SAAS;AAC9C,UAAM,OAAO,UAAM,aAAAA,SAAM,YAAY,EAAE,SAAS;AAEhD,UAAM,WAAW,kBAAAC,QAAK,OAAO,KAAK,QAAQ,UAAU,KAAK,KAAK;AAE9D,UAAM,WAAmC;AAAA,MACvC,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,QAAQ;AAAA,QACR;AAAA,QACA,MAAM,aAAa;AAAA,QACnB,OAAO,KAAK,SAAS;AAAA,QACrB,QAAQ,KAAK,UAAU;AAAA,QACvB,WAAW,kBAAAA,QAAK,UAAU,QAAQ,KAAK;AAAA,MACzC;AAAA,IACF;AACA,sCAAY,YAAY,QAAQ;AAAA,EAClC,SAAS,OAAO;AACd,UAAM,WAAiC;AAAA,MACrC,SAAS;AAAA,MACT,OAAQ,MAAgB;AAAA,IAC1B;AACA,sCAAY,YAAY,QAAQ;AAAA,EAClC;AACF,CAAC;","names":["sharp","mime"]}