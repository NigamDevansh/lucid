{"version":3,"sources":["../../../src/workers/process-image/processImageWorker.ts"],"sourcesContent":["import z from \"zod\";\nimport sharp from \"sharp\";\nimport { parentPort } from \"worker_threads\";\nimport mime from \"mime-types\";\n// Schema\nimport mediaSchema from \"@schemas/media.js\";\n\nexport interface WorkerData {\n  buffer: Buffer;\n  options: z.infer<typeof mediaSchema.streamSingle.query>;\n}\n\nexport interface ProcessImageSuccessRes {\n  success: true;\n  data: {\n    buffer: Buffer;\n    mimeType: string;\n    size: number;\n    width: number | null;\n    height: number | null;\n    extension: string;\n  };\n}\n\nexport interface ProcessImageErrorRes {\n  success: false;\n  error: string;\n}\n\nparentPort?.on(\"message\", async (data: WorkerData) => {\n  try {\n    const transform = sharp(data.buffer);\n\n    if (data.options.format) {\n      transform.toFormat(data.options.format, {\n        quality: data.options.quality ? parseInt(data.options.quality) : 80,\n      });\n    }\n\n    if (data.options.width || data.options.height) {\n      transform.resize({\n        width: data.options.width ? parseInt(data.options.width) : undefined,\n        height: data.options.height ? parseInt(data.options.height) : undefined,\n      });\n    }\n\n    const outputBuffer = await transform.toBuffer();\n    const meta = await sharp(outputBuffer).metadata();\n\n    const mimeType = mime.lookup(data.options.format || \"jpg\") || \"image/jpeg\";\n\n    const response: ProcessImageSuccessRes = {\n      success: true,\n      data: {\n        buffer: outputBuffer,\n        mimeType: mimeType,\n        size: outputBuffer.length,\n        width: meta.width || null,\n        height: meta.height || null,\n        extension: mime.extension(mimeType) || \"\",\n      },\n    };\n    parentPort?.postMessage(response);\n  } catch (error) {\n    const response: ProcessImageErrorRes = {\n      success: false,\n      error: (error as Error).message,\n    };\n    parentPort?.postMessage(response);\n  }\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA,mBAAkB;AAClB,4BAA2B;AAC3B,wBAAiB;AA0BjB,kCAAY,GAAG,WAAW,OAAO,SAAqB;AACpD,MAAI;AACF,UAAM,gBAAY,aAAAA,SAAM,KAAK,MAAM;AAEnC,QAAI,KAAK,QAAQ,QAAQ;AACvB,gBAAU,SAAS,KAAK,QAAQ,QAAQ;AAAA,QACtC,SAAS,KAAK,QAAQ,UAAU,SAAS,KAAK,QAAQ,OAAO,IAAI;AAAA,MACnE,CAAC;AAAA,IACH;AAEA,QAAI,KAAK,QAAQ,SAAS,KAAK,QAAQ,QAAQ;AAC7C,gBAAU,OAAO;AAAA,QACf,OAAO,KAAK,QAAQ,QAAQ,SAAS,KAAK,QAAQ,KAAK,IAAI;AAAA,QAC3D,QAAQ,KAAK,QAAQ,SAAS,SAAS,KAAK,QAAQ,MAAM,IAAI;AAAA,MAChE,CAAC;AAAA,IACH;AAEA,UAAM,eAAe,MAAM,UAAU,SAAS;AAC9C,UAAM,OAAO,UAAM,aAAAA,SAAM,YAAY,EAAE,SAAS;AAEhD,UAAM,WAAW,kBAAAC,QAAK,OAAO,KAAK,QAAQ,UAAU,KAAK,KAAK;AAE9D,UAAM,WAAmC;AAAA,MACvC,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,QAAQ;AAAA,QACR;AAAA,QACA,MAAM,aAAa;AAAA,QACnB,OAAO,KAAK,SAAS;AAAA,QACrB,QAAQ,KAAK,UAAU;AAAA,QACvB,WAAW,kBAAAA,QAAK,UAAU,QAAQ,KAAK;AAAA,MACzC;AAAA,IACF;AACA,sCAAY,YAAY,QAAQ;AAAA,EAClC,SAAS,OAAO;AACd,UAAM,WAAiC;AAAA,MACrC,SAAS;AAAA,MACT,OAAQ,MAAgB;AAAA,IAC1B;AACA,sCAAY,YAAY,QAAQ;AAAA,EAClC;AACF,CAAC;","names":["sharp","mime"]}